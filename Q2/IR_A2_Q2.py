# -*- coding: utf-8 -*-
"""IR_A2_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JWBhDZbO0ezIis3CRXqVatqyYnhCU2_C
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['BBC News Train.csv']))

"""The Columns in the dataframe:"""

for col in df.columns:
  print(col)

"""***Cleaning the text by removing punctuation, stop words, and converting all text to lowercase:**

***Tokenizing the text by splitting it into words:**

***Performing stemming to reduce words to their root form.**

"""

import string
import nltk
nltk.download('stopwords')
nltk.download('punkt')
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

def clean_text(text):
    text = text.lower()
    text = text.translate(str.maketrans("", "", string.punctuation))
    stop_words = set(stopwords.words('english'))
    text_tokens = nltk.word_tokenize(text)
    filtered_words = [word for word in text_tokens if word not in stop_words]
    text = ' '.join(filtered_words)
    tokens = nltk.word_tokenize(text)
    porter = PorterStemmer()
    stemmed_tokens = [porter.stem(token) for token in tokens]
    return stemmed_tokens

"""Before:"""

print(df.head())

df["Text"] = df["Text"].apply(clean_text)

"""After:"""

print(df.head())

"""**Implementing the TF-ICF weighting scheme.**"""

TF = dict()
n = len(df.index)
for i in range(n):
    cat = df["Category"][i]
    txt = df["Text"][i]

    for j in txt:
        if j not in TF:
            TF[j] = dict()
        if cat not in TF[j]:
            TF[j][cat] = 1
        else:
            TF[j][cat]+=1

import math
TF_ICF = list()
N = df["Category"].nunique()

for i in TF:
    curr = []
    curr.append(i)
    ICF_base = math.log10(N/len(TF[i]))

    if "business" not in TF[i]:
        curr.append(0)
    else:
        score = TF[i]["business"]*ICF_base
        curr.append(score)

    if "entertainment" not in TF[i]:
        curr.append(0)
    else:
        score = TF[i]["entertainment"]*ICF_base
        curr.append(score)

    if "politics" not in TF[i]:
        curr.append(0)
    else:
        score = TF[i]["politics"]*ICF_base
        curr.append(score)

    if "sport" not in TF[i]:
        curr.append(0)
    else:
        score = TF[i]["sport"]*ICF_base
        curr.append(score)

    if "tech" not in TF[i]:
        curr.append(0)
    else:
        score = TF[i]["tech"]*ICF_base
        curr.append(score)

    TF_ICF.append(curr)
TF_ICF_df = pd.DataFrame(TF_ICF, columns = ["term","business","entertainment","politics","sport","tech"])

TF_ICF_df.head()
